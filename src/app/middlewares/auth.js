//JsonWebToken
const jwt = require('jsonwebtoken')
//Importando o nosso secret, palavra chave da aplica√ß√£o
const authConfig = require('../../config/auth.json')

// Intercepta a entrada do usu√°rio at√© o controller, que √©
// o "cora√ß√£o" da aplica√ß√£o
module.exports = (req, res, next) => {
    // Recebendo do header da requisi√ß√£o uma authorization
    const authHeader = req.headers.authorization

    // Verificando se foi enviado um token de autoriza√ß√£o,
    // j√° que o authHeader retorna false caso n√£o for informado
    // um token de autoriza√ß√£o
    if (!authHeader)
        return res.status(401).send({ error: 'No token provied' })

    // Um token jwt tem o formato: Bearer d077f244def8a70e5ea758bd8352fcd8,
    // logo, a String √© splitada com o espa√ßo em duas partes
    // diferentes
    const parts = authHeader.split(' ')

    //Da√≠, caso estiver no formato "Bearer hashmd5", ou seja,
    //for encontrada dois elementos no vetor parts, ok, prossegue,
    //se n√£o... Retorna um erro. 
    //(Mais pra frente, utilizaremos esses dois elementos 
    //separadamente)
    if (!parts.lenght === 2)
        return res.status(401).send({ error: 'Token error' })

    //Desestruturando um vetor! Javascript √© incr√≠vel
    const [ scheme, token ] = parts

    //Verificando se a primeira parte do authHeader come√ßa
    //com Bearer, ou algo semelhante
    //Esses s√≠mbolos em volta do Bearer, √© uma parada chamada
    //Regex. Parece express√µes regulares, e provavelmente
    //√© mesmo. ü§î
    // / : come√ßando a regex, ^ : in√≠cio da regex, $ : final
    // / : termina, i : case INsensitive
    if ( ! /^Bearer$/i.test(scheme)) 
        return res.status(401).send({ error: 'Token malformatted' })
    
    //Pra evitar processamento desceness√°rio, √© interessante
    //realizar verifica√ß√µes mais tranquilas antes de partir
    //para a verfica√ß√£o jwt, pra poupar trabalho, basicamente
    //Token, √© o token que vem do cliente e que foi splitado
    //l√° em cima, authC.secret, palavra chave da aplica√ß√£o.
    //A fun√ß√£o atribui um erro, se tiver um erro, e o id do us√°rio
    //caso d√™ tudo certo. err √© booleano, inclusive!
    jwt.verify(token, authConfig.secret, (err, decoded) => {
        //Caso o token n√£o bater com as informa√ß√µes de autentica√ß√£o
        if (err)
            return res.status(401).send({ error: 'Invalid token' })
        
        //Caso cheguemos at√© aqui, pegamos o id do usu√°rio
        //e utilizamos ele no resto da aplica√ß√£o, nos outros
        //controllers e etc
        //Atribuindo o id da requisi√ß√£o como o id decodificado, ou algo assim.
        //Hmm, acredito que ele altera o dados incorporados da requisi√ß√£o.
        req.userId = decoded.id
        //Como chegamos no final da autentica√ß√£o, agora √© s√≥ prosseguir para
        //o controller desejado, utilizando o next
        return next()
    })

};